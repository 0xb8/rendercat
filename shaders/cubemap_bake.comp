#version 450 core

#include "constants.glsl"
#define ATMOSPHERE_SAMPLE_COUNT 32
#include "minimal_atmosphere.glsl"
#include "generic_perframe.glsl"

layout(binding=0, rgba16f) writeonly uniform imageCubeArray outputTexture;
layout(location=1) uniform bool u_DrawPlanet;


// Calculate normalized sampling direction vector based on current fragment coordinates (gl_GlobalInvocationID.xyz).
// This is essentially "inverse-sampling": we reconstruct what the sampling vector would be if we wanted it to "hit"
// this particular fragment in a cubemap.
// See: OpenGL core profile specs, section 8.13.
vec3 getSamplingVector()
{
    vec2 st = gl_GlobalInvocationID.xy/vec2(imageSize(outputTexture));
    vec2 uv = 2.0 * vec2(st.x, 1.0-st.y) - vec2(1.0);

    vec3 ret;
    // Sadly 'switch' doesn't seem to work, at least on NVIDIA.
    if(gl_GlobalInvocationID.z == 0)      ret = vec3(1.0,  uv.y, -uv.x);
    else if(gl_GlobalInvocationID.z == 1) ret = vec3(-1.0, uv.y,  uv.x);
    else if(gl_GlobalInvocationID.z == 2) ret = vec3(uv.x, 1.0, -uv.y);
    else if(gl_GlobalInvocationID.z == 3) ret = vec3(uv.x, -1.0, uv.y);
    else if(gl_GlobalInvocationID.z == 4) ret = vec3(uv.x, uv.y, 1.0);
    else if(gl_GlobalInvocationID.z == 5) ret = vec3(-uv.x, uv.y, -1.0);
    return normalize(ret);
}


layout(local_size_x=16, local_size_y=16, local_size_z=1) in;
void main(void)
{
    vec3 rayStart  = vec3(0,500,0);
    vec3 rayDir    = getSamplingVector();
    float  rayLength = INFINITY;

    if (u_DrawPlanet) {
        vec2 planetIntersection = PlanetIntersection(rayStart, rayDir);
        if (planetIntersection.x > 0)
            rayLength = min(rayLength, planetIntersection.x);
    }

    vec3 lightDir   = directional_light.direction;
    vec3 lightColor = directional_light.color_intensity.rgb * directional_light.ambient_intensity;

    vec3 transmittance;
    vec3 color = IntegrateScattering(rayStart, rayDir, rayLength, lightDir, lightColor, transmittance);


	imageStore(outputTexture, ivec3(gl_GlobalInvocationID), vec4(color, 1.0));
}
